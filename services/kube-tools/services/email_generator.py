import datetime
import markdown
import json
from framework.logger import get_logger
from models.robinhood_models import MarketResearch, PortfolioData, DebugReport

logger = get_logger(__name__)


class EmailGenerator:
    """Class for generating HTML emails for various reports"""

    def generate_daily_pulse_html_email(self, analysis, portfolio_summary: PortfolioData, market_research: MarketResearch):
        """
        Generate a beautiful HTML email for the daily pulse report

        Args:
            analysis: Analysis text generated by GPT
            portfolio_summary: PortfolioData Pydantic model
            market_research: Market research summary

        Returns:
            HTML string for the email
        """
        # Use Pydantic model fields directly
        portfolio_profile = portfolio_summary.portfolio_profile
        holdings = portfolio_summary.holdings
        account_profile = portfolio_summary.account_profile
        recent_orders = portfolio_summary.recent_orders

        total_equity = portfolio_profile.equity or portfolio_profile.market_value or '0'
        day_change = getattr(portfolio_profile, 'total_return_today', None) or getattr(portfolio_profile, 'day_over_day_change', None) or '0'
        buying_power = account_profile.buying_power or '0'

        def format_currency(val):
            try:
                return f"${float(val):,.2f}"
            except Exception:
                return val

        html = f"""
        <html>
        <head>
        <style>
            body {{ font-family: Arial, sans-serif; background: #f8f9fa; color: #222; }}
            .container {{ max-width: 700px; margin: 30px auto; background: #fff; border-radius: 10px; box-shadow: 0 2px 8px #e0e0e0; padding: 32px; }}
            h1 {{ color: #2a5298; }}
            h2 {{ color: #1e3c72; border-bottom: 1px solid #e0e0e0; padding-bottom: 4px; }}
            .section {{ margin-bottom: 32px; }}
            .holdings-table, .activity-table {{ width: 100%; border-collapse: collapse; margin-top: 10px; }}
            .holdings-table th, .holdings-table td, .activity-table th, .activity-table td {{ border: 1px solid #e0e0e0; padding: 8px; text-align: left; }}
            .holdings-table th, .activity-table th {{ background: #f0f4fa; }}
            .positive {{ color: #2e8b57; }}
            .negative {{ color: #c0392b; }}
            .market-section {{ background: #f6f8fc; border-radius: 8px; padding: 16px; margin-top: 10px; }}
            .icon-header {{ font-size: 28px; vertical-align: middle; margin-right: 8px; }}
            .divider {{ border-top: 2px solid #e0e0e0; margin: 32px 0; }}
            .highlight {{ background: #eaf6ff; border-left: 4px solid #2a5298; padding: 12px 18px; border-radius: 6px; margin-bottom: 18px; }}
            .footer {{ color: #888; font-size: 13px; margin-top: 40px; text-align: center; }}
        </style>
        </head>
        <body>
        <div class='container'>
            <h1><span class='icon-header'>üìà</span>Daily Investment Pulse</h1>
            <div class='section highlight'>
                <h2><span class='icon-header'>üíº</span>Portfolio Overview</h2>
                <ul>
                    <li><b>Total Equity:</b> {format_currency(total_equity)}</li>
                    <li><b>Today's Change:</b> {format_currency(day_change)}</li>
                    <li><b>Available Buying Power:</b> {format_currency(buying_power)}</li>
                </ul>
            </div>
            <div class='divider'></div>
            <div class='section'>
                <h2><span class='icon-header'>üìä</span>Current Holdings</h2>
                <table class='holdings-table'>
                    <tr>
                        <th>Symbol</th><th>Quantity</th><th>Avg Buy Price</th><th>Current Price</th><th>Total Return</th><th>% Change</th>
                    </tr>
        """
        for symbol, data in holdings.items():
            pct = getattr(data, 'percentage', '0')
            try:
                pct_val = float(pct)
                pct_class = 'positive' if pct_val >= 0 else 'negative'
                pct_str = f"<span class='{pct_class}'>{pct_val:.2f}%</span>"
            except Exception:
                pct_str = pct
            html += f"<tr><td>{symbol}</td><td>{data.quantity}</td><td>{format_currency(data.average_buy_price)}</td><td>{format_currency(data.price)}</td><td>{format_currency(getattr(data, 'total_return', 0))}</td><td>{pct_str}</td></tr>"
        html += """
                </table>
            </div>
            <div class='divider'></div>
            <div class='section'>
                <h2><span class='icon-header'>üîÑ</span>Recent Trading Activity</h2>
                <table class='activity-table'>
                    <tr><th>Side</th><th>Symbol</th><th>Quantity</th><th>Price</th><th>State</th><th>Date</th><th>Time of Day</th></tr>
        """
        for order in recent_orders[:15]:
            symbol = getattr(order, 'symbol', 'Unknown')
            created_at = str(order.created_at) if order.created_at else ''
            date_str = created_at[:10]
            time_str = created_at[11:19] if len(created_at) > 10 else ''
            html += f"<tr><td>{getattr(order, 'side', '').capitalize()}</td><td>{symbol}</td><td>{order.quantity}</td><td>{format_currency(order.price)}</td><td>{order.state}</td><td>{date_str}</td><td>{time_str}</td></tr>"
        html += """
                </table>
            </div>
            <div class='divider'></div>
            <div class='section market-section'>
                <h2><span class='icon-header'>üì∞</span>Market Research Summary</h2>
        """
        # Use Pydantic model fields, not dict .get()
        if market_research.market_conditions:
            html += f"<b>Market Conditions:</b><ul>"
            for article in market_research.market_conditions:
                html += f"<li><b>{article.title}:</b> {article.snippet}</li>"
            html += "</ul><br>"
        if market_research.stock_news:
            for symbol, articles in market_research.stock_news.items():
                html += f"<b>{symbol} News:</b><ul>"
                for article in articles:
                    html += f"<li><b>{article.title}:</b> {article.snippet}</li>"
                html += "</ul>"
        if market_research.sector_analysis:
            html += f"<b>Sector Analysis:</b><ul>"
            for article in market_research.sector_analysis:
                html += f"<li><b>{article.title}:</b> {article.snippet}</li>"
            html += "</ul>"
        if market_research.search_errors:
            html += f"<b>Note:</b> {'; '.join(market_research.search_errors)}<br>"
        html += f"""
            </div>
            <div class='divider'></div>
            <div class='section'>
                <h2><span class='icon-header'>üß†</span>Pulse Analysis</h2>
                <div style='white-space: pre-line; font-size: 16px; line-height: 1.6;'>
                    {str(markdown.markdown(analysis))}
                </div>
            </div>
            <div class='footer'>
                Generated by RobinhoodService &middot; {datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}
            </div>
        </div>
        </body>
        </html>
        """
        return html

    def generate_daily_pulse_subject(self, custom_subject=None):
        """
        Generate a subject line for the daily pulse email

        Args:
            custom_subject: Optional custom subject line

        Returns:
            Subject string
        """
        if custom_subject:
            return custom_subject

        return f"Your Daily Investment Pulse Report - {datetime.datetime.now().strftime('%Y-%m-%d')}"

    def generate_admin_debug_html_report(self, debug_report: DebugReport, stats: dict = None) -> str:
        """
        Generate a clean, formatted HTML admin debug report with cache stats, search counts, GPT token usage, article/source links, and all relevant metadata.
        """
        import html
        from datetime import datetime
        dr = debug_report
        stats = stats or {}

        def safe(val):
            return html.escape(str(val)) if val is not None else ''
        html_out = f"""
        <html><head><style>
        body {{ font-family: Arial, sans-serif; background: #f8f9fa; color: #222; }}
        .container {{ max-width: 900px; margin: 30px auto; background: #fff; border-radius: 10px; box-shadow: 0 2px 8px #e0e0e0; padding: 32px; }}
        h1, h2, h3 {{ color: #2a5298; }}
        .section {{ margin-bottom: 32px; }}
        .table {{ width: 100%; border-collapse: collapse; margin-top: 10px; }}
        .table th, .table td {{ border: 1px solid #e0e0e0; padding: 8px; text-align: left; }}
        .table th {{ background: #f0f4fa; }}
        .divider {{ border-top: 2px solid #e0e0e0; margin: 32px 0; }}
        .small {{ color: #888; font-size: 13px; }}
        .link-list li {{ margin-bottom: 4px; }}
        </style></head><body><div class='container'>
        <h1>üõ†Ô∏è Admin Debug Report</h1>
        <div class='section'>
            <b>Generated:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}<br>
            <b>User:</b> {safe(getattr(dr.portfolio_data.account_profile, 'account_number', 'N/A'))}<br>
        </div>
        <div class='divider'></div>
        <div class='section'>
            <h2>Cache & Search Stats</h2>
            <ul>
                <li><b>Cache Hits:</b> {safe(stats.get('cache_hits', 0))}</li>
                <li><b>Cache Misses/Fetches:</b> {safe(stats.get('cache_misses', 0))}</li>
                <li><b>Google Searches:</b> {safe(stats.get('search_count', 0))}</li>
                <li><b>GPT Token Usage:</b> {safe(stats.get('gpt_tokens', 0))}</li>
            </ul>
        </div>
        <div class='divider'></div>
        <div class='section'>
            <h2>All Article & Source Links</h2>
            <ul class='link-list'>
        """
        # Market conditions
        if dr.market_research.market_conditions:
            for article in dr.market_research.market_conditions:
                if getattr(article, 'link', None):
                    html_out += f"<li><a href='{safe(article.link)}' target='_blank'>{safe(article.title)}</a></li>"
        # Stock news
        if dr.market_research.stock_news:
            for sym, articles in dr.market_research.stock_news.items():
                for article in articles:
                    if getattr(article, 'link', None):
                        html_out += f"<li><a href='{safe(article.link)}' target='_blank'>{safe(article.title)} ({safe(sym)})</a></li>"
        # Sector analysis
        if dr.market_research.sector_analysis:
            for article in dr.market_research.sector_analysis:
                if getattr(article, 'link', None):
                    html_out += f"<li><a href='{safe(article.link)}' target='_blank'>{safe(article.title)}</a></li>"
        html_out += "</ul></div>"
        html_out += "<div class='divider'></div>"
        html_out += "<div class='section'><h2>Prompts & GPT Analysis</h2>"
        html_out += f"<b>Pulse Prompt:</b><pre style='white-space:pre-wrap;background:#f6f8fc;padding:8px;border-radius:6px;'>{safe(dr.prompts.get('pulse_prompt', ''))}</pre>"
        html_out += f"<b>GPT Analysis:</b><pre style='white-space:pre-wrap;background:#f6f8fc;padding:8px;border-radius:6px;'>{safe(dr.gpt_analysis)}</pre>"
        html_out += "</div>"
        html_out += "<div class='divider'></div>"
        html_out += "<div class='section'><h2>Raw Data Snapshots</h2>"
        html_out += f"<b>Portfolio Data:</b><pre style='white-space:pre-wrap;background:#f6f8fc;padding:8px;border-radius:6px;'>{safe(json.dumps(dr.portfolio_data.model_dump(), indent=2, ensure_ascii=False))}</pre>"
        html_out += f"<b>Market Research:</b><pre style='white-space:pre-wrap;background:#f6f8fc;padding:8px;border-radius:6px;'>{safe(json.dumps(dr.market_research.model_dump(), indent=2, ensure_ascii=False))}</pre>"
        html_out += "</div>"
        html_out += f"<div class='footer small'>Generated by RobinhoodService &middot; {datetime.now().strftime('%Y-%m-%d %H:%M')}</div>"
        html_out += "</div></body></html>"
        return html_out
